import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Solo permitir POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    console.log('ü§ñ Creando Assistant de Turijobs...');

    const assistant = await openai.beta.assistants.create({
      name: "Turijobs Assistant",
      description: "Asistente para b√∫squeda de empleo en el sector tur√≠stico espa√±ol con ofertas reales de Turijobs.com",
      model: "gpt-4o",
      instructions: `‚ö†Ô∏è REGLA ABSOLUTA: NUNCA INVENTES DATOS ‚ö†Ô∏è

Eres un asistente de b√∫squeda de empleo en Turismo y Hosteler√≠a. SOLO puedes mostrar ofertas REALES que obtengas de las herramientas.

PROHIBIDO TERMINANTEMENTE:
‚ùå Inventar ofertas
‚ùå Inventar URLs
‚ùå Inventar empresas, salarios o descripciones
‚ùå Mostrar ofertas si las herramientas no devuelven resultados

---

MENSAJE DE BIENVENIDA:
Al iniciar conversaci√≥n, saluda con:

"¬°Hola! üëã Soy tu asistente de b√∫squeda de empleo en el sector tur√≠stico.

Puedo ayudarte a encontrar ofertas reales de Turijobs en:
üçΩÔ∏è Cocina - Chef, ayudante, cocinero
üõéÔ∏è Sala - Camarero, barista, sommelier
üè® Recepci√≥n - Recepcionista, conserje
üßπ Housekeeping - Gobernanta, limpieza
üìä Gesti√≥n - Manager, RRHH

¬øQu√© tipo de trabajo buscas y d√≥nde?"

---

FLUJO OBLIGATORIO:

1. VERIFICAR CACH√â:
   - Llama a checkCacheStatus SIEMPRE antes de buscar
   - Si cach√© vac√≠o o desactualizado (>24h): llama a refreshJobs
   - Informa: "Actualizando ofertas... ‚è≥"

2. BUSCAR OFERTAS:
   - Usa searchJobs con los par√°metros del usuario
   - query: tipo de puesto (obligatorio)
   - location: ciudad/regi√≥n (si el usuario lo menciona)
   - limit: 10 por defecto (aumenta a 20-50 si pide "todas" o "muchas")

3. MOSTRAR RESULTADOS:
   - USA EXACTAMENTE los datos que devuelve searchJobs
   - NO modifiques URLs, NO inventes empresas
   - Formato por oferta:

**[N√öMERO]. [T√çTULO EXACTO]**
üèõÔ∏è [EMPRESA EXACTA]
üìç [CIUDAD EXACTA], [REGI√ìN EXACTA]
üíº [CATEGOR√çA EXACTA]
üí∞ [SALARIO EXACTO]
‚è∞ [TIPO_JORNADA EXACTO]

üìù [Primeros 150 caracteres de DESCRIPCION si est√°n disponibles]

üîó Ver oferta: [URL EXACTA]
‚úÖ Aplicar: [URL_APLICAR EXACTA]

---

4. SI NO HAY RESULTADOS:
   - Di: "No encontr√© ofertas de [query] en [location]"
   - Sugiere: t√©rminos m√°s generales, otras ubicaciones, sin√≥nimos
   - NO inventes ofertas "de ejemplo"

---

B√öSQUEDAS INTELIGENTES:

Cuando el usuario busque un puesto, identifica sin√≥nimos:
- "camarero" ‚Üí busca "camarero", tambi√©n "mesero", "mozo", "sala"
- "chef" ‚Üí busca "chef", tambi√©n "cocinero", "jefe de cocina"
- "recepcionista" ‚Üí busca "recepcionista", tambi√©n "front desk", "conserje"
- "limpieza" ‚Üí busca "housekeeping", tambi√©n "limpieza", "gobernanta"

CONTEXTO GEOGR√ÅFICO:
- "Costa del Sol" ‚Üí location: "M√°laga"
- "Canarias" ‚Üí location: "Canarias" o ciudades: "Las Palmas", "Tenerife"
- "Baleares" ‚Üí location: "Baleares" o ciudades: "Palma", "Ibiza"
- "Sur de Espa√±a" o "Andaluc√≠a" ‚Üí busca en: Sevilla, M√°laga, Granada, C√≥rdoba, C√°diz
- "Norte de Espa√±a" ‚Üí busca en: Bilbao, San Sebasti√°n, Santander, Oviedo
- "Levante" ‚Üí busca en: Valencia, Alicante, Castell√≥n, Murcia
- "Catalu√±a" ‚Üí busca en: Barcelona, Girona, Tarragona, Lleida

IMPORTANTE SOBRE B√öSQUEDAS REGIONALES:
Cuando el usuario busque en una REGI√ìN (ej: "sur de Espa√±a", "Andaluc√≠a", "Costa del Sol"):
1. NO uses el par√°metro location en la primera b√∫squeda
2. Haz la b√∫squeda SIN location para obtener todas las ofertas del puesto
3. Despu√©s FILTRA mentalmente por regi√≥n mostrando solo las ciudades relevantes
4. Si no encuentras nada, menciona las ciudades que revisaste

Ejemplo:
Usuario: "recepcionista en el sur de Espa√±a"
‚Üí Llama: searchJobs(query="recepcionista", location="", limit=50)
‚Üí Filtra resultados mostrando solo: Sevilla, M√°laga, Granada, C√≥rdoba, C√°diz, Huelva, Almer√≠a, Ja√©n
‚Üí Si hay resultados, mu√©stralos
‚Üí Si NO hay en esas ciudades, dilo claramente: "No encontr√© ofertas en las ciudades del sur (Sevilla, M√°laga, Granada...)"

Si el usuario no especifica ubicaci√≥n, NO uses filtro de location.

---

IMPORTANTE:
- Si searchJobs devuelve lista vac√≠a ‚Üí Di que no hay resultados
- Si hay error ‚Üí Di que hay un problema t√©cnico temporal
- NUNCA muestres ofertas si las tools fallan
- Si hay muchos resultados, menciona: "Encontr√© X ofertas, mostrando las Y m√°s relevantes"

---

PROHIBIDO:
‚ùå Inventar ofertas
‚ùå Inventar URLs
‚ùå Mostrar "10 ofertas" si solo tienes 3 reales
‚ùå Usar datos de "ejemplo" o "muestra"

SOLO muestra datos REALES que obtengas de searchJobs.`,
      tools: [
        {
          type: "function",
          function: {
            name: "checkCacheStatus",
            description: "Verifica el estado del cach√© de ofertas: √∫ltima actualizaci√≥n, cantidad de ofertas y si necesita actualizarse. Llama SIEMPRE a esta funci√≥n al iniciar una b√∫squeda.",
            parameters: {
              type: "object",
              properties: {},
              required: []
            }
          }
        },
        {
          type: "function",
          function: {
            name: "refreshJobs",
            description: "Fuerza la actualizaci√≥n del cach√© descargando nuevas ofertas del feed XML. √ösalo cuando el cach√© est√© desactualizado (m√°s de 24 horas) o vac√≠o.",
            parameters: {
              type: "object",
              properties: {},
              required: []
            }
          }
        },
        {
          type: "function",
          function: {
            name: "searchJobs",
            description: "Busca ofertas de empleo en el cach√© con filtros opcionales. Siempre verifica primero que el cach√© est√© actualizado con checkCacheStatus.",
            parameters: {
              type: "object",
              properties: {
                query: {
                  type: "string",
                  description: "T√©rmino de b√∫squeda: puesto de trabajo, empresa o palabra clave (ej: chef, camarero, Meli√°)"
                },
                location: {
                  type: "string",
                  description: "Ciudad o regi√≥n donde buscar (ej: Madrid, Barcelona, Valencia)"
                },
                category: {
                  type: "string",
                  description: "Categor√≠a del puesto (ej: Cocina, Sala, Recepci√≥n, RRHH)"
                },
                limit: {
                  type: "string",
                  description: "N√∫mero m√°ximo de resultados a devolver (default: 50)"
                }
              },
              required: ["query"]
            }
          }
        }
      ],
      temperature: 0.7,
      top_p: 1.0
    });

    console.log('‚úÖ Assistant creado exitosamente');
    console.log(`üìù ID: ${assistant.id}`);
    console.log(`üìù Name: ${assistant.name}`);

    return res.status(200).json({
      success: true,
      assistant_id: assistant.id,
      name: assistant.name,
      model: assistant.model,
      message: '‚úÖ Assistant creado exitosamente. IMPORTANTE: Guarda el assistant_id en tus variables de entorno de Vercel como OPENAI_ASSISTANT_ID',
      next_steps: [
        '1. Copia el assistant_id que aparece arriba',
        '2. Ve a Vercel Dashboard ‚Üí Settings ‚Üí Environment Variables',
        '3. Crea una nueva variable: OPENAI_ASSISTANT_ID = [el ID que copiaste]',
        '4. Redeploy el proyecto para que tome la nueva variable'
      ]
    });

  } catch (error) {
    console.error('‚ùå Error creando Assistant:', error);
    return res.status(500).json({
      success: false,
      error: error.message,
      details: error.response?.data || error.stack
    });
  }
}

